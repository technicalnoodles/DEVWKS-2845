"use strict";(self.webpackChunkdevwks_2845_client=self.webpackChunkdevwks_2845_client||[]).push([[728],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},s),{},{components:n})):a.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8749:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Functions Explanation",l={unversionedId:"appendix/lambda-docs/function-explanation",id:"appendix/lambda-docs/function-explanation",title:"Functions Explanation",description:"Lambda functions use handlers, which act as the insertion point for the Lambda function.",source:"@site/docs/appendix/lambda-docs/03-function-explanation.mdx",sourceDirName:"appendix/lambda-docs",slug:"/appendix/lambda-docs/function-explanation",permalink:"/DEVWKS-2845/appendix/lambda-docs/function-explanation",draft:!1,editUrl:"https://cisco.com/docs/appendix/lambda-docs/03-function-explanation.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Function Code Setup",permalink:"/DEVWKS-2845/appendix/lambda-docs/code-setup"},next:{title:"Function Code Part 1",permalink:"/DEVWKS-2845/appendix/lambda-docs/function-coding-p-1"}},p={},d=[{value:"Lambda Function input variables",id:"lambda-function-input-variables",level:2},{value:"Event variable",id:"event-variable",level:3},{value:"Context variable",id:"context-variable",level:3},{value:"Using libraries not provided by AWS",id:"using-libraries-not-provided-by-aws",level:2}],s={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"functions-explanation"},"Functions Explanation"),(0,r.kt)("p",null,"Lambda functions use ",(0,r.kt)("inlineCode",{parentName:"p"},"handlers"),", which act as the insertion point for the Lambda function.",(0,r.kt)("br",{parentName:"p"}),"\n","By default the Lambda handler will use a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda_function.py")," and require a method called ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda_handler"),". If this file does not exist or does not have that method, then the Lambda function will fail to run."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It is possbile to change the default ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," in the Lambda function by editing the ",(0,r.kt)("strong",{parentName:"p"},"Runtime settings"),". This can be done by selecting the ",(0,r.kt)("strong",{parentName:"p"},"Code")," tab under the ",(0,r.kt)("strong",{parentName:"p"},"Function Overview"),". Then scroll down to the ",(0,r.kt)("strong",{parentName:"p"},"Runtime settings"),". Editing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Handler")," section in the ",(0,r.kt)("strong",{parentName:"p"},"Runtime Settings")," will allow you to change the default insertion point.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="lambda_function.py"',title:'"lambda_function.py"'},"import json\n\ndef lambda_handler(event, context):\n    # TODO implement\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }\n")),(0,r.kt)("h2",{id:"lambda-function-input-variables"},"Lambda Function input variables"),(0,r.kt)("p",null,"Within the lambda_handler function that is defined above there are two variables that it receives as input: the ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," variable and the ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," variable."),(0,r.kt)("h3",{id:"event-variable"},"Event variable"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"event")," variable is the data the Lambda function receives as a payload. This could be a string that contains ",(0,r.kt)("inlineCode",{parentName:"p"},"'hello'"),", a boolean of ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", or an object. We can then use this event and parse the data in our lambda_handler function."),(0,r.kt)("p",null,"Here is an example event that we received from the Meraki Dashboard and we will use later for testing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "0.1",\n  "sharedSecret": "",\n  "sentAt": "2023-01-13T19:57:07.307562Z",\n  "organizationId": "000000",\n  "organizationName": "EX net",\n  "organizationUrl": "https://n471.meraki.com/o/000000/manage/organization/overview",\n  "networkId": "N_00000000",\n  "networkName": "Ex net",\n  "networkUrl": "https://n471.meraki.com/ex_net/n/000000/manage/nodes/wired_status",\n  "networkTags": [],\n  "deviceSerial": "Q00Y-U00R-T00G",\n  "deviceMac": "00:00:00:d7:14:83",\n  "deviceName": "Home MX",\n  "deviceUrl": "https://n471.meraki.com/ex_net/n/000000/manage/nodes/new_wired_status",\n  "deviceTags": [],\n  "deviceModel": "MX67W",\n  "alertId": "",\n  "alertType": "Switch port disconnected",\n  "alertTypeId": "port_disconnected",\n  "alertLevel": "warning",\n  "occurredAt": "2023-01-13T19:57:07.259607Z",\n  "alertData": {\n    "portNum": 3,\n    "description": "Switch port is down",\n    "status": "down",\n    "prevStatus": "100 Gbps",\n    "portDesc": "Corp Access"\n  }\n}\n')),(0,r.kt)("h3",{id:"context-variable"},"Context variable"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," variable is a variable passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda_handler")," function that contains runtime information like the version of the function, memory limit, and a time limit for how long the function can run before being killed by AWS."),(0,r.kt)("p",null,"For more information on the context variable you can check this ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/python-context.html"},"AWS guide"),"."),(0,r.kt)("h2",{id:"using-libraries-not-provided-by-aws"},"Using libraries not provided by AWS"),(0,r.kt)("p",null,"There are three options to use a library that is not provided by AWS in a runtime environment."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("em",{parentName:"li"},"layer")),(0,r.kt)("li",{parentName:"ul"},"Containerize the code"),(0,r.kt)("li",{parentName:"ul"},"Zip the code")),(0,r.kt)("p",null,"For our purposes and as the easiest option, we will zip our code to enable the use of external libraries."),(0,r.kt)("p",null,"We have already done most of the setup to be able to do this. First we need to make sure we are in the ",(0,r.kt)("inlineCode",{parentName:"p"},"shutdownPort")," directory in the CLI. Then we need to create a directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"package")," using the CLI. The directory structure should look like the below after the directory is created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"shutdownPort\n | lambda_function.py\n | package\n")),(0,r.kt)("p",null,"We now need to install the python ",(0,r.kt)("inlineCode",{parentName:"p"},"requests")," library so that we may make an API call to the Meraki Dashboard later on in the workshop. However, we need to install the library in the package directory and not globally. To do this, we need to run the below command in the ",(0,r.kt)("inlineCode",{parentName:"p"},"shutdownPort")," directory:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pip install --target ./package requests")),(0,r.kt)("p",null,"If pip does not work, please try the command using pip3 instead:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pip3 install --target ./package requests")),(0,r.kt)("p",null,"After having installed the requests library, we now need to change the version of urllib3 so we do not run into any SSL errors. Run the below command to install the correct version for the requests library to use."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pip3 install --upgrade --target ./package  urllib3==1.26.6")),(0,r.kt)("p",null,"we can now move onto coding the function to respond to a Meraki event."))}u.isMDXComponent=!0}}]);