"use strict";(self.webpackChunklambda_docs=self.webpackChunklambda_docs||[]).push([[636],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=o,h=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(h,i(i({ref:n},l),{},{components:t})):a.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[c]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},562:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const r={sidebar_position:6},i="Function Code Part 3",s={unversionedId:"lambda-docs/function-coding-p-3",id:"lambda-docs/function-coding-p-3",title:"Function Code Part 3",description:"The issue with using the API Gateway",source:"@site/docs/lambda-docs/function-coding-p-3.mdx",sourceDirName:"lambda-docs",slug:"/lambda-docs/function-coding-p-3",permalink:"/DEVWKS-2845/lambda-docs/function-coding-p-3",draft:!1,editUrl:"https://cisco.com/docs/lambda-docs/function-coding-p-3.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Function Code Part 2",permalink:"/DEVWKS-2845/lambda-docs/function-coding-p-2"},next:{title:"Upload the Lambda Function",permalink:"/DEVWKS-2845/lambda-docs/package-function"}},d={},p=[{value:"The issue with using the API Gateway",id:"the-issue-with-using-the-api-gateway",level:2}],l={toc:p};function c(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"function-code-part-3"},"Function Code Part 3"),(0,o.kt)("h2",{id:"the-issue-with-using-the-api-gateway"},"The issue with using the API Gateway"),(0,o.kt)("p",null,"When using the API Gateway in front of a Lambda function, the API Gateway adds an additional layer of data that is sent to the Lambda function. Here is an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"showLineNumbers",showLineNumbers:!0},'{\n  "resource": "/",\n  "path": "/",\n  "httpMethod": "GET",\n  "requestContext": {\n      "resourcePath": "/",\n      "httpMethod": "GET",\n      "path": "/Prod/",\n      ...\n  },\n  "headers": {\n      "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",\n      "accept-encoding": "gzip, deflate, br",\n      "Host": "70ixmpl4fl.execute-api.us-east-2.amazonaws.com",\n      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36",\n      "X-Amzn-Trace-Id": "Root=1-5e66d96f-7491f09xmpl79d18acf3d050",\n      ...\n  },\n  "multiValueHeaders": {\n      "accept": [\n          "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"\n      ],\n      "accept-encoding": [\n          "gzip, deflate, br"\n      ],\n      ...\n  },\n  "queryStringParameters": null,\n  "multiValueQueryStringParameters": null,\n  "pathParameters": null,\n  "stageVariables": null,\n  //highlight-next-line\n  "body": null,\n  "isBase64Encoded": false\n}\n')),(0,o.kt)("p",null,"The API Gateway encapsulates the original event and puts it into the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," parameter of its body. This example has the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", but our request will have data here. So we do not run into any issues parsing our data that comes from the API Gateway, we need to add these lines to the beginning of our Lambda function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers",title:"'lambda_function.py",showLineNumbers:!0},"import json\nimport os\ndef lambda_handler(event, context):\n  #add-line\n  event = event['body']\n  #add-line\n  event = json.loads(event)\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n\n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"X-Cisco-Meraki-API-Key\": apiKey\n    }\n    response = requests.request('PUT', merakiUrl, headers=headers, data = payload)\n    if response.status_code == 200:\n      return {\n          'statusCode': 200,\n          'body': json.dumps('Port shutdown')\n        }\n    else:\n        return {\n          'statusCode': 200,\n          'body': json.dumps('Port not shutdown')\n        }\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,o.kt)("p",null,"The completed API Gateway compatible code is below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:"title='lambda_function.py showLineNumbers",title:"'lambda_function.py",showLineNumbers:!0},"import json\nimport os\ndef lambda_handler(event, context):\n  event = event['body']\n  event = json.loads(event)\n  if event['alertTypeId'] != 'port_disconnected':\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n\n  if 'alertData' not in event:\n    return {\n      'statusCode': 200,\n      'body': json.dumps('Not a downed port')\n    }\n  if event['alertData']['status'] == 'down':\n    import requests\n    deviceSerial = str(event['deviceSerial'])\n    deviceMac = event['deviceMac']\n    deviceName = event['deviceName']\n    portNumber = str(event['alertData']['portNum'])\n    merakiUrl = \"https://api.meraki.com/api/v1/devices/\"+deviceSerial+\"/switch/ports/\"+portNumber\n    payload = '{ \"enabled\": false }'\n    apiKey = os.environ['XCiscoMerakiAPIKey']\n    headers = {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\",\n      \"X-Cisco-Meraki-API-Key\": apiKey\n    }\n    response = requests.request('PUT', merakiUrl, headers=headers, data = payload)\n    if response.status_code == 200:\n      return {\n          'statusCode': 200,\n          'body': json.dumps('Port shutdown')\n        }\n    else:\n        return {\n          'statusCode': 200,\n          'body': json.dumps('Port not shutdown')\n        }\n  else:\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Not a downed port')\n      }\n")),(0,o.kt)("p",null,"We have finished creating the function and can now package the code and upload it to AWS Lambda."))}c.isMDXComponent=!0}}]);